HowTo

//The symbol '_' means the value is optional!
//Text inside '[]' means 'one of'!
//Text inside '{}' means replace with the requested value (including the brackets)

// Moves the turtle forward by p pixels {int}
//Forward(p);

// Rotates the turtle by 'a' degrees, optionally a boolean value can be provided to snap to the angle instead of an addition {int(Degrees), bool}
//Rotate(a, _);

// Moves the turtle to specified 'x','y' coordinates {int, int}
//MoveTo(x, y);

// Sets pen color
// 1) a string formatted as "#xxxxxx" where each pair of x-es represents a hex value {string(Hexadeciaml)}
// 2) a byte value for each color channel {byte, byte, byte}
// 3) a literal color name, see https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.brushes?view=netframework-4.8
// 4) a byte value for each color channel where the first one represents alpha/transparency {byte, byte, byte, byte}
//SetColor(c);
//SetColor(r, g, b);
//SetColor(c);
//SetColor(a, r, g, b);

// Sets pen size in 's' pixels {int}
//SetBrushSize(s);

// Sets the line ending style to one of listed below [Flat, Round, Triangle, Square]
//SetLineCapping(capping);

// Stores turtle's position and angle into memory
//StoreTurtlePosition();

// Non-destructively restores turtle's position and angle, optionally a boolean value can be provided so that the operation becomes destructive ie. forgets the stored information
// Is such case restoring while no history exists is destructive to the application ;) {bool}
//RestoreTurtlePosition(_);

// Makes the turtle stop drawing when moving
//PenUp();

// Makes the turtle draw when moving
//PenDown();

// Captures the screen and removes all drawn lines, then applies the screenshot as a background.
// This is meant for optimization, abusing this function may create drawing artifacts.
//CaptureScreenshot();

// Cycles
//  For Loop:
//    for([int,long] {var_name} = {initial_value}; {var_name} [<,>,<=,>=] {some_value_of_equal_type}; {var_name}[++,--,+={some_value_of_equal_type},-={some_value_of_equal_type}]) {
//        Code to repeat here.
//    }


// Conditions
//  If:
//   if({condition_evaluating_to_boolean}) {
//       Code to execute.
//   }
//  If/else:
//   if({condition_evaluating_to_boolean}) {
//       Code to execute.
//   }
//   else {
//       Code to execute instead.
//   }

// Variables:
//  Global - readonly:
//    Height = Height of the drawing canvas {int/double}
//    Width = Width of the drawing canvas {int/double}
//  Local:
//    The for loop iteration variable - read only
//  Custom:
//    [variable_type] {variable_name} = {variable_value_of_variable_type};
//
//    Supported Types: int, long (but work the same)
//  Non-read only:
//    Can be reassigned:
//      {existing_variable_name} = {new_variable_value};
//      NOT FULLY FUNCTIONAL - variable change across scopes will not propagate