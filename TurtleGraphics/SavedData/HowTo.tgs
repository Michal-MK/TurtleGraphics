HowTo
// Moves the turtle forward by p pixels
//Forward(int p);

// Rotates the turtle by 'a' degrees, optionally a boolean value can be provided to snap to the angle instead of an addition
//Rotate(int{deg} a, bool _);

// Moves the turtle to specified 'x','y' coordinates
//MoveTo(int x, int y);

// Draws while moving the turtle to the provided 'x' and 'y' coordinates
//DrawTo(int x, int y);

// Sets pen color
// 1) a string formatted as "#xxxxxx" where each pair of x-es represents a hex value
// 2) a byte value for each color channel
// 3) a literal color name, see https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.brushes?view=netframework-4.8
// 4) a byte value for each color channel where the first one represents alpha/transparency
//SetColor(string{hex} c);
//SetColor(byte r, byte g, byte b);
//SetColor(string{literal} c);
//SetColor(byte a, byte r, byte g, byte b);

// Sets pen size in 's' pixels
//SetBrushSize(int s);

// Sets the line ending style to one of listed below
//SetLineCapping(Capping{Flat|Round|Triangle|Square} c);

// Stores turtle's position and angle into memory
//StoreTurtlePosition();

// Non-destructively restores turtle's position and angle, optionally a boolean value can be provided so that the operation becomes destructive ie. forgets the stored information
//RestoreTurtlePosition(bool _);

// Makes the turtle stop drawing when moving
//PenUp();

// Makes the turtle draw when moving
//PenDown();

// Captures the screen and removes all drawn lines, then applies the screenshot as a background.
// This is meant for optimization
//CaptureScreenshot();

// Cycles
//  For Loop:
//    for([int,long] {var_n} = {initial_value}; {var_n} [<,>,<=,>=] {some_value_of_equal_type}; {var_n}[++,--,+={some_value_of_equal_type},-={some_value_of_equal_type}]) {
//        Code to repeat here.
//    }


// Conditions
//  If:
//   if([true,false]) {
//       Code to execute.
//   }
//  If/else:
//   if([true,false]) {
//       Code to execute.
//   }
//   else {
//       Code to execute instead.
//   }

// Variables:
//  Global - readonly:
//    Height = {Height of the drawing canvas}
//    Width = {Width of the drawing canvas}
//  Local:
//    The for loop iteration variable - read only
//  Custom:
//    {variable_type} {variable_name} = {variable_value};
//
//    Supported Types: int, long (but work the same)
//  Non-read only:
//    Can be reassigned:
//      {existing_variable_name} = {new_variable_value};
//      NOT FULLY FUNCTIONAL - variable change across scopes will not propagate